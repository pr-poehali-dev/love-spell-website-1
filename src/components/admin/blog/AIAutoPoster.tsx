import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import Icon from '@/components/ui/icon';
import { Label } from '@/components/ui/label';
import { BlogPost, Category } from '@/types/blog';
import GeneratedPostCard from './GeneratedPostCard';

interface AIAutoPosterProps {
  categories: Category[];
}

export default function AIAutoPoster({ categories }: AIAutoPosterProps) {
  const [articleCount, setArticleCount] = useState(1);
  const [selectedTopics, setSelectedTopics] = useState<string[]>([]);
  const [customTopic, setCustomTopic] = useState('');
  const [publishMode, setPublishMode] = useState<'auto' | 'review' | 'scheduled'>('review');
  const [generatedPosts, setGeneratedPosts] = useState<BlogPost[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [systemPrompt, setSystemPrompt] = useState('Ты - опытная ворожея Раиса Ильинская. Пиши статьи о магии, ритуалах и эзотерике в дружелюбном и понятном стиле.');
  const [scheduleSettings, setScheduleSettings] = useState({
    articlesPerDay: 1,
    startDate: new Date().toISOString().split('T')[0],
    timeOfDay: '09:00'
  });

  const topicSuggestions: string[] = [];

  const handleTopicToggle = (topic: string) => {
    setSelectedTopics(prev => 
      prev.includes(topic) 
        ? prev.filter(t => t !== topic)
        : [...prev, topic]
    );
  };

  const handleRemoveTopic = (topic: string) => {
    setSelectedTopics(prev => prev.filter(t => t !== topic));
  };

  const handleAddCustomTopic = () => {
    if (customTopic && !selectedTopics.includes(customTopic)) {
      setSelectedTopics(prev => [...prev, customTopic]);
      setCustomTopic('');
    }
  };

  const handleGenerate = async () => {
    if (selectedTopics.length === 0) return;

    setIsGenerating(true);
    try {
      // Имитация генерации статей
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const generated: BlogPost[] = [];
      for (let i = 0; i < articleCount; i++) {
        const topic = selectedTopics[i % selectedTopics.length];
        const autoGeneratedSeoTitle = `${topic} - Подробное руководство от ворожеи Раисы`;
        const autoGeneratedSeoDescription = `Узнайте всё о "${topic}" от потомственной ворожеи. Проверенные методы и ритуалы для достижения результата.`;
        const autoGeneratedKeywords = [topic, 'магия', 'ритуалы', 'эзотерика', 'ворожея Раиса'];
        
        generated.push({
          id: `generated-${Date.now()}-${i}`,
          title: `${topic}: подробное руководство`,
          excerpt: `Полное руководство по теме "${topic}" от потомственной ворожеи`,
          content: `<div class="prose"><p>Сгенерированный контент для статьи "${topic}"...</p></div>`,
          category: 'love-magic',
          status: 'draft',
          publishedDate: new Date().toISOString().split('T')[0],
          image: `/img/generated-${topic.toLowerCase().replace(/\s+/g, '-')}.jpg`,
          slug: topic.toLowerCase().replace(/[^\w\s-]/g, '').replace(/\s+/g, '-'),
          keywords: autoGeneratedKeywords,
          readTime: Math.floor(Math.random() * 10) + 5,
          seoTitle: autoGeneratedSeoTitle,
          seoDescription: autoGeneratedSeoDescription
        });
      }
      
      setGeneratedPosts(generated);
      
      if (publishMode === 'auto') {
        // Автоматическая публикация
        console.log('Статьи опубликованы автоматически');
      } else if (publishMode === 'scheduled') {
        // Отложенная публикация
        console.log('Статьи запланированы для отложенной публикации:', scheduleSettings);
      }
    } finally {
      setIsGenerating(false);
    }
  };

  const handlePublishAll = () => {
    setGeneratedPosts(posts => posts.map(post => ({ ...post, status: 'published' as const })));
    console.log('Все статьи опубликованы');
  };

  const handleEditPost = (id: string, updates: Partial<BlogPost>) => {
    setGeneratedPosts(posts => 
      posts.map(post => post.id === id ? { ...post, ...updates } : post)
    );
  };

  const handleDeletePost = (id: string) => {
    setGeneratedPosts(posts => posts.filter(post => post.id !== id));
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>ИИ генератор статей</CardTitle>
          <CardDescription>
            Создайте статьи автоматически с помощью искусственного интеллекта
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <Label>Количество статей</Label>
                <Input
                  type="number"
                  min="1"
                  max="10"
                  value={articleCount}
                  onChange={(e) => setArticleCount(parseInt(e.target.value) || 1)}
                  className="mt-2"
                />
              </div>

              <div>
                <Label>Режим публикации</Label>
                <div className="space-y-3 mt-2">
                  <div className="flex items-center space-x-2">
                    <input
                      type="radio"
                      id="review"
                      name="publishMode"
                      checked={publishMode === 'review'}
                      onChange={() => setPublishMode('review')}
                    />
                    <Label htmlFor="review">Опубликовать после проверки</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="radio"
                      id="auto"
                      name="publishMode"
                      checked={publishMode === 'auto'}
                      onChange={() => setPublishMode('auto')}
                    />
                    <Label htmlFor="auto">Опубликовать сразу</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <input
                      type="radio"
                      id="scheduled"
                      name="publishMode"
                      checked={publishMode === 'scheduled'}
                      onChange={() => setPublishMode('scheduled')}
                    />
                    <Label htmlFor="scheduled">Отложенная публикация</Label>
                  </div>
                </div>
              </div>

              {publishMode === 'scheduled' && (
                <div className="p-4 bg-muted/30 rounded-lg border space-y-4">
                  <h4 className="font-semibold text-sm flex items-center gap-2">
                    <Icon name="Calendar" size={16} />
                    Настройки расписания
                  </h4>
                  
                  <div className="grid grid-cols-1 gap-4">
                    <div>
                      <Label htmlFor="articlesPerDay">Статей в день</Label>
                      <Input
                        id="articlesPerDay"
                        type="number"
                        min="1"
                        max="10"
                        value={scheduleSettings.articlesPerDay}
                        onChange={(e) => setScheduleSettings(prev => ({
                          ...prev,
                          articlesPerDay: parseInt(e.target.value) || 1
                        }))}
                        className="mt-1"
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="startDate">Начать с даты</Label>
                      <Input
                        id="startDate"
                        type="date"
                        value={scheduleSettings.startDate}
                        onChange={(e) => setScheduleSettings(prev => ({
                          ...prev,
                          startDate: e.target.value
                        }))}
                        className="mt-1"
                      />
                    </div>
                    
                    <div>
                      <Label htmlFor="timeOfDay">Время публикации</Label>
                      <Input
                        id="timeOfDay"
                        type="time"
                        value={scheduleSettings.timeOfDay}
                        onChange={(e) => setScheduleSettings(prev => ({
                          ...prev,
                          timeOfDay: e.target.value
                        }))}
                        className="mt-1"
                      />
                    </div>
                  </div>
                  
                  <div className="text-xs text-muted-foreground bg-blue-50 p-3 rounded border-l-4 border-l-blue-500">
                    <div className="flex items-start gap-2">
                      <Icon name="Info" size={14} className="text-blue-600 flex-shrink-0 mt-0.5" />
                      <div>
                        <p><strong>Расписание:</strong></p>
                        <p>• Статей в день: {scheduleSettings.articlesPerDay}</p>
                        <p>• Начало: {new Date(scheduleSettings.startDate).toLocaleDateString('ru-RU')}</p>
                        <p>• Время: {scheduleSettings.timeOfDay}</p>
                        {articleCount > scheduleSettings.articlesPerDay ? (
                          <p>• Всего дней публикации: {Math.ceil(articleCount / scheduleSettings.articlesPerDay)}</p>
                        ) : (
                          <p>• Публикация: ежедневно</p>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>

            <div className="space-y-4">
              <div>
                <Label>Темы для статей ({selectedTopics.length} выбрано)</Label>
                <div className="flex flex-wrap gap-2 mt-2">
                  {topicSuggestions.map(topic => (
                    <button
                      key={topic}
                      onClick={() => handleTopicToggle(topic)}
                      className={`px-3 py-1 rounded-full text-sm border transition-colors ${
                        selectedTopics.includes(topic)
                          ? 'bg-primary text-primary-foreground border-primary'
                          : 'bg-background hover:bg-muted border-muted-foreground/20'
                      }`}
                    >
                      {topic}
                    </button>
                  ))}
                </div>
                
                {selectedTopics.length > 0 && (
                  <div className="mt-3">
                    <Label className="text-xs text-muted-foreground">Выбранные темы:</Label>
                    <div className="flex flex-wrap gap-2 mt-1">
                      {selectedTopics.map(topic => (
                        <div
                          key={`selected-${topic}`}
                          className="flex items-center gap-1 bg-primary/10 border border-primary/20 text-primary px-2 py-1 rounded-full text-xs"
                        >
                          <span>{topic}</span>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleRemoveTopic(topic);
                            }}
                            className="hover:bg-primary/20 rounded-full p-0.5 ml-1 transition-colors"
                          >
                            <Icon name="X" size={12} />
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              <div>
                <Label>Добавить свою тему</Label>
                <div className="flex flex-col sm:flex-row gap-2 mt-2">
                  <Input
                    value={customTopic}
                    onChange={(e) => setCustomTopic(e.target.value)}
                    placeholder="Введите тему статьи"
                    onKeyPress={(e) => e.key === 'Enter' && handleAddCustomTopic()}
                    className="flex-1"
                  />
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handleAddCustomTopic}
                    disabled={!customTopic}
                    className="w-full sm:w-auto"
                  >
                    <Icon name="Plus" size={16} />
                    <span className="sm:hidden ml-2">Добавить</span>
                  </Button>
                </div>
              </div>
            </div>
          </div>

          {/* Системный промпт */}
          <div>
            <Label htmlFor="systemPrompt">Системный промпт для ИИ</Label>
            <Textarea
              id="systemPrompt"
              value={systemPrompt}
              onChange={(e) => setSystemPrompt(e.target.value)}
              rows={3}
              placeholder="Опишите роль и стиль, которого должен придерживаться ИИ при генерации статей"
              className="mt-2"
            />
            <p className="text-xs text-muted-foreground mt-1">
              Этот текст определяет личность и стиль ИИ при генерации статей
            </p>
          </div>

          <div className="flex justify-center pt-4">
            <Button
              onClick={handleGenerate}
              disabled={isGenerating || selectedTopics.length === 0}
              className="px-8"
            >
              {isGenerating ? (
                <>
                  <Icon name="Loader2" size={16} className="animate-spin mr-2" />
                  Генерируем статьи...
                </>
              ) : (
                <>
                  <Icon name={publishMode === 'scheduled' ? 'Calendar' : 'Sparkles'} size={16} className="mr-2" />
                  {publishMode === 'scheduled' ? 'Запланировать статьи' : 'Сгенерировать статьи'}
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Сгенерированные статьи */}
      {generatedPosts.length > 0 && (
        <Card>
          <CardHeader>
            <div className="flex justify-between items-center">
              <div>
                <CardTitle>Сгенерированные статьи ({generatedPosts.length})</CardTitle>
                <CardDescription>Проверьте и отредактируйте статьи перед публикацией</CardDescription>
              </div>
              {publishMode === 'review' && (
                <Button onClick={handlePublishAll}>
                  <Icon name="Send" size={16} className="mr-2" />
                  Опубликовать все
                </Button>
              )}
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {generatedPosts.map(post => (
                <GeneratedPostCard
                  key={post.id}
                  post={post}
                  onEdit={handleEditPost}
                  onDelete={handleDeletePost}
                  categories={categories}
                />
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}